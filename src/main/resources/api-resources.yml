Ping:
  handler: com.serverless.pingHandler.Ping
  events:
    - http:
        path: /ping
        method: get
        private: true


NamespaceDeleteWorker:
  handler: com.serverless.sqsTriggers.namespaceDeleteSQSWorkers.NamespaceDeleteWorker
  events:
    - sqs:
        arn: '${self:custom.sqsLambdasArn.NamespaceDeleteWorker.${opt:stage, self:provider.stage}}'

NamespaceDeleteDLQWorker:
  handler: com.serverless.sqsTriggers.namespaceDeleteSQSWorkers.NamespaceDeleteDLQWorker
  events:
    - sqs:
        arn: '${self:custom.sqsLambdasArn.NamespaceDeleteDLQWorker.${opt:stage, self:provider.stage}}'

NodeDeleteWorker:
  handler: com.serverless.sqsTriggers.nodeDeleteSQSWorkers.NodeDeleteWorker
  events:
    - sqs:
        arn: '${self:custom.sqsLambdasArn.NodeDeleteWorker.${opt:stage, self:provider.stage}}'

NodeDeleteDLQWorker:
  handler: com.serverless.sqsTriggers.nodeDeleteSQSWorkers.NodeDeleteDLQWorker
  events:
    - sqs:
        arn: '${self:custom.sqsLambdasArn.NodeDeleteDLQWorker.${opt:stage, self:provider.stage}}'

PublicNoteWorker:
  handler: com.serverless.sqsTriggers.publicnoteSQSWorkers.PublicNoteWorker
  events:
    - sqs:
        arn: '${self:custom.sqsLambdasArn.PublicNoteWorker.${opt:stage, self:provider.stage}}'
  vpc: ${self:custom.vpc.${opt:stage, self:provider.stage}}

PublicNoteDLQWorker:
  handler: com.serverless.sqsTriggers.publicnoteSQSWorkers.PublicNoteDLQWorker
  events:
    - sqs:
        arn: ${self:custom.sqsLambdasArn.PublicNoteDLQWorker.${opt:stage, self:provider.stage}}
  vpc: ${self:custom.vpc.${opt:stage, self:provider.stage}}


# Note: Since we are creating new elasticache cluster and all the lambdas irrespective of stage in the same VPC we don't need to create new VPC endpoints.
# Refer: https://us-east-1.console.aws.amazon.com/vpc/home?region=us-east-1#Endpoints:
Node:
  handler: com.serverless.nodeHandlers.NodeHandler
  vpc: ${self:custom.vpc.${opt:stage, self:provider.stage}}
  events:
    - http:
        path: /node/{id}
        method: get
        private: true

    # batch get nodes by ids
    - http:
        path: /node/ids
        method: post
        private: true

    - http:
        path: /node
        method: post
        private: true

    - http:
        path: /v2/node
        method: post
        private: true

      #deleteNodes( archive them )
    - http:
        path: /node/archive
        method: put
        private: true

    - http:
        path: /node/archive/middleware
        method: put
        private: true

    - http:
        path: /node/unarchive
        method: put
        private: true

    - http:
        path: /node/{id}/append
        method: patch
        private: true

    - http:
        path: /node/all/{id}
        method: get
        private: true

    - http:
        path: /node/{id}/block
        method: patch
        private: true
#        authorizer: mexAuthorizer

      # get metadata + updatedAt of all nodes of a workspace
    - http:
        path: /node/metadata
        method: get
        private: true

    - http:
        path: /node/{id}/version/metadata
        method: get
        private: true

      #delete given nodes ids from archive section ( hence, permanently )
    - http:
        path: /node/archive/delete
        method: post
        private: true

      #get all archived nodes for a given workspaceID
    - http:
        path: /node/archive
        method: get
        private: true

    - http:
        path: /node/public/{id}
        method: get
        private: true

    - http:
        path: /node/makePublic/{id}
        method: patch
        private: true

    - http:
        path: /node/makePrivate/{id}
        method: patch
        private: true
    #copy  or move a block from sourceNode to destinationNode
    - http:
        path: /node/block/movement
        method: patch
        private: true

    - http:
        path: /node/refactor
        method: post
        private: true

    - http:
        path: /node/bulk
        method: post
        private: true

    - http:
        path: /shared/node/{id}
        method: get
        private: true

    - http:
        path: /shared/node
        method: post
        private: true

    - http:
        path: /shared/node
        method: put
        private: true

    - http:
        path: /shared/node
        method: delete
        private: true

    - http:
        path: /shared/node/update
        method: post
        private: true

    - http:
        path: /shared/node/{id}/users
        method: get
        private: true

    #    - http:
    #        path: /shared/node/{id}/access
    #        method: get
    #        private: true

    - http:
        path: /shared/node/all
        method: get
        private: true

    #delete given block ids from the given nodeId
    - http:
        path: /node/{id}/delete/block
        method: patch
        private: true

    #################### v1 api paths ####################

    - http:
        path: /v1/node/{id}
        method: get
        private: true

    # batch get nodes by ids
    - http:
        path: /v1/node/ids
        method: post
        private: true

    - http:
        path: /v1/node
        method: post
        private: true

      #deleteNodes( archive them )
    - http:
        path: /v1/node/archive
        method: put
        private: true

    - http:
        path: /v1/node/archive/middleware
        method: put
        private: true

    - http:
        path: /v1/node/unarchive
        method: put
        private: true

    - http:
        path: /v1/node/{id}/append
        method: patch
        private: true

    - http:
        path: /v1/node/all/{id}
        method: get
        private: true

    - http:
        path: /v1/node/{id}/block
        method: patch
        private: true
      #        authorizer: mexAuthorizer

      # get metadata + updatedAt of all nodes of a workspace
    - http:
        path: /v1/node/metadata
        method: get
        private: true

    - http:
        path: /v1/node/{id}/version/metadata
        method: get
        private: true

      #delete given nodes ids from archive section ( hence, permanently )
    - http:
        path: /v1/node/archive/delete
        method: post
        private: true

      #get all archived nodes for a given workspaceID
    - http:
        path: /v1/node/archive
        method: get
        private: true

    - http:
        path: /v1/node/public/{id}
        method: get
        private: true

    - http:
        path: /v1/node/makePublic/{id}
        method: patch
        private: true

    - http:
        path: /v1/node/makePrivate/{id}
        method: patch
        private: true
    #copy  or move a block from sourceNode to destinationNode
    - http:
        path: /v1/node/block/movement
        method: patch
        private: true

    - http:
        path: /v1/node/refactor
        method: post
        private: true

    - http:
        path: /v1/node/bulk
        method: post
        private: true

    - http:
        path: /v1/node/metadata/{id}
        method: patch
        private: true

    - http:
        path: /v1/shared/node/{id}
        method: get
        private: true

    - http:
        path: /v1/shared/node
        method: post
        private: true

    - http:
        path: /v1/shared/node
        method: put
        private: true

    - http:
        path: /v1/shared/node
        method: delete
        private: true

    - http:
        path: /v1/shared/node/update
        method: post
        private: true

    # shared users for a node
    - http:
        path: /v1/shared/node/{id}/users
        method: get
        private: true

    #check access level for a user
    #    - http:
    #        path: /v1/shared/node/{id}/access
    #        method: get
    #        private: true

    - http:
        path: /v1/shared/node/all
        method: get
        private: true

    #delete given block ids from the given nodeId
    - http:
        path: /v1/node/{id}/delete/block
        method: patch
        private: true

Highlights:
  handler: com.serverless.highlightHandlers.HighlightHandler
  events:
    - http:
        path: /v1/highlight
        method: post
        private: true

    - http:
        path: /v1/highlight/ids
        method: post
        private: true

    - http:
        path: /v1/highlight/{id}
        method: put
        private: true

    - http:
        path: /v1/highlight/{id}
        method: get
        private: true
        request:
          parameters:
            querystrings:
              nodeID: true
              namespaceID: true

    - http:
        path: /v1/highlight/{id}
        method: delete
        private: true
        request:
          parameters:
            querystrings:
              nodeID: true
              namespaceID: true

    - http:
        path: /v1/highlight/all
        method: get
        private: true
        request:
          parameters:
            querystrings:
              lastKey: false

SmartCapture:
  handler: com.serverless.smartCaptureHandlers.SmartCaptureHandler
  events:
    - http:
        path: /v1/capture
        method: post
        private: true

    - http:
        path: /v1/capture/{id}
        method: get
        private: true
        request:
          parameters:
            querystrings:
              nodeID: true
              namespaceID: true

    - http:
        path: /v1/capture/{id}
        method: put
        private: true

    - http:
        path: /v1/capture/{id}
        method: delete
        private: true
        request:
          parameters:
            querystrings:
              nodeID: true
              namespaceID: true

    - http:
        path: /v1/capture/filter
        method: get
        private: true
        request:
          parameters:
            querystrings:
              configID: true
              isWorkspaceID: true
              isUserID: true
              lastKey: false

    - http:
        path: /v1/capture/move
        method: patch
        private: true

Snippet:
  handler: com.serverless.snippetHandlers.SnippetHandler
  events:
    - http:
        path: /snippet/{id}
        method: get
        private: true

    # create/ update a new snippet
    - http:
        path: /snippet
        method: post
        private: true


    - http:
        path: /snippet/{id}
        method: delete
        private: true

    - http:
        path: /snippet/{id}/all
        method: delete
        private: true

    #get all archived snippets for a given workspaceID
    #    - http:
    #        path: /snippet/archive/{id}
    #        method: get
    #        private: true

    # get a public snippet
    - http:
        path: /snippet/public/{id}/{version}
        method: get
        private: true

    - http:
        path: /snippet/clone/{id}/{version}
        method: post
        private: true

    - http:
        path: /snippet/makePublic/{id}/{version}
        method: patch
        private: true

    - http:
        path: /snippet/makePrivate/{id}/{version}
        method: patch
        private: true

    # get all versions of a snippet
    - http:
        path: /snippet/{id}/all
        method: get
        private: true

    # get all snippets of a workspace
    - http:
        path: /snippet/all
        method: get
        private: true

    #################### v1 api paths ####################

    - http:
        path: /v1/snippet/{id}
        method: get
        private: true

    # create/ update a new snippet
    - http:
        path: /v1/snippet
        method: post
        private: true


    - http:
        path: /v1/snippet/{id}
        method: delete
        private: true

    - http:
        path: /v1/snippet/{id}/all
        method: delete
        private: true

    - http:
        path: /v1/snippet/metadata/{id}
        method: patch
        private: true

    #get all archived snippets for a given workspaceID
    #    - http:
    #        path: /v1/snippet/archive/{id}
    #        method: get
    #        private: true

    # get a public snippet
    - http:
        path: /v1/snippet/public/{id}/{version}
        method: get
        private: true

    - http:
        path: /v1/snippet/clone/{id}/{version}
        method: post
        private: true

    - http:
        path: /v1/snippet/makePublic/{id}/{version}
        method: patch
        private: true

    - http:
        path: /v1/snippet/makePrivate/{id}/{version}
        method: patch
        private: true

    # get all versions of a snippet
    - http:
        path: /v1/snippet/{id}/all
        method: get
        private: true

    # get all snippets of a workspace
    - http:
        path: /v1/snippet/all
        method: get
        private: true



Namespace:
  handler: com.serverless.namespaceHandlers.NamespaceHandler
  events:
    - http:
        path: /namespace/{id}
        method: get
        private: true

    - http:
        path: /namespace
        method: post
        private: true

    - http:
        path: /namespace
        method: patch
        private: true

    - http:
        path: /namespace/{id}
        method: post
        private: true

    - http:
        path: /namespace/all
        method: get
        private: true

    - http:
        path: /namespace/makePublic/{id}
        method: patch
        private: true

    - http:
        path: /namespace/makePrivate/{id}
        method: patch
        private: true

    - http:
        path: /namespace/public/{id}
        method: get
        private: true

    - http:
        path: /namespace/all/hierarchy
        method: get
        private: true

    - http:
        path: /shared/namespace
        method: post
        private: true

    - http:
        path: /shared/namespace
        method: delete
        private: true


    - http:
        path: /shared/namespace/{id}/users
        method: get
        private: true

    #################### v1 api paths ####################

    - http:
        path: /v1/namespace/{id}
        method: get
        private: true

    - http:
        path: /v1/namespace
        method: post
        private: true

    - http:
        path: /v1/namespace
        method: patch
        private: true

    - http:
        path: /v1/namespace/{id}
        method: post
        private: true

    - http:
        path: /v1/namespace/all
        method: get
        private: true

    - http:
        path: /v1/namespace/makePublic/{id}
        method: patch
        private: true

    - http:
        path: /v1/namespace/makePrivate/{id}
        method: patch
        private: true

    - http:
        path: /v1/namespace/public/{id}
        method: get
        private: true

    - http:
        path: /v1/namespace/all/hierarchy
        method: get
        private: true

    - http:
        path: /v1/shared/namespace
        method: post
        private: true

    - http:
        path: /v1/shared/namespace
        method: delete
        private: true

    ## Get all users with whom the namespace has been shared
    - http:
        path: /v1/shared/namespace/{id}/users
        method: get
        private: true

    #    - http:
    #        path: /v1/shared/namespace/{id}/access
    #        method: get
    #        private: true


    - http:
        path: /v2/namespace/all
        method: get
        private: true

    - http:
        path: /v1/namespace/{id}/path/{path}
        method: get
        private: true


Workspace:
  handler: com.serverless.workspaceHandlers.WorkspaceHandler
  events:
    - http:
        path: /workspace
        method: get
        private: true
    #
    #    - http:
    #        path: /workspace
    #        method: post
    #        private: true

    # used to rename workspace
    - http:
        path: /workspace
        method: patch
        private: true
    #
    #    - http:
    #        path: /workspace
    #        method: delete
    #        private: true

    - http:
        path: /workspace/data/{ids}
        method: get
        private: true

    - http:
        path: /workspace/hierarchy/archived
        method: get
        private: true

    - http:
        path: /workspace/refreshHierarchy
        method: patch
        private: true

    #################### v1 api paths ####################

    - http:
        path: /v1/workspace
        method: get
        private: true
    #
    #    - http:
    #        path: /v1/workspace
    #        method: post
    #        private: true

    # used to rename workspace
    - http:
        path: /v1/workspace
        method: patch
        private: true
    #
    #    - http:
    #        path: /v1/workspace
    #        method: delete
    #        private: true

    - http:
        path: /v1/workspace/data/{ids}
        method: get
        private: true

    - http:
        path: /v1/workspace/hierarchy/archived
        method: get
        private: true

    - http:
        path: /v1/workspace/refreshHierarchy
        method: patch
        private: true


User:
  handler: com.serverless.userHandlers.UserHandler
  events:
    - http:
        path : /user/register
        method: post
        private: true

    #################### v1 api paths ####################
    - http:
        path: /v1/user/register
        method: post
        private: true

UserPreference:
  handler: com.serverless.userPreferenceHandlers.UserPreferenceHandler
  events:
    - http:
        path: /userPreference
        method: post
        private: true

    - http:
        path: /userPreference/{id}/{preferenceType}
        method: get
        private: true

    - http:
        path: /userPreference/all/{id}
        method: get
        private: true

    #################### v1 api paths ####################

    - http:
        path: /v1/userPreference
        method: post
        private: true

    - http:
        path: /v1/userPreference/{id}/{preferenceType}
        method: get
        private: true

    - http:
        path: /v1/userPreference/all/{id}
        method: get
        private: true

UserStar:
  handler: com.serverless.userBookmarkHandlers.UserStarHandler
  events:
    #bookmark the node
    - http:
        path: /userStar/{id}
        method: post
        private: true

    #delete the bookmark on a particular node
    - http:
        path: /userStar/{id}
        method: delete
        private: true

    #get all bookmarks by a particular user
    - http:
        path: /userStar/all
        method: get
        private: true

    - http:
        path: /userStar/namespace/{id}
        method: get
        private: true

    #bookmark in batch
    - http:
        path: /userStar/batch
        method: post
        private: true

    #delete bookmark in batch
    - http:
        path: /userStar/batch
        method: delete
        private: true

    #################### v1 api paths ####################

    #bookmark the node
    - http:
        path: /v1/userStar/{id}
        method: post
        private: true

    #delete the bookmark on a particular node
    - http:
        path: /v1/userStar/{id}
        method: delete
        private: true

    #get all bookmarks by a particular user
    - http:
        path: /v1/userStar/all
        method: get
        private: true

    - http:
        path: /v1/userStar/namespace/{id}
        method: get
        private: true
    #bookmark in batch
    - http:
        path: /v1/userStar/batch
        method: post
        private: true

    #delete bookmark in batch
    - http:
        path: /v1/userStar/batch
        method: delete
        private: true



Tag:
  handler: com.serverless.tagHandlers.TagHandler
  events:
    #get all tags of a workspace
    - http:
        path: /tag/all
        method: get
        private: true

    #get all node ids which have a tag
    - http:
        path: /tag/{tagName}/node
        method: get
        private: true

    #################### v1 api paths ####################

    #get all tags of a workspace
    - http:
        path: /v1/tag/all
        method: get
        private: true

    #get all node ids which have a tag
    - http:
        path: /v1/tag/{tagName}/node
        method: get
        private: true

InternalTag:
  handler: com.serverless.internalTagHandlers.TagHandler
