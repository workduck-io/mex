# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: sample-kotlin
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: java8
  lambdaHashingVersion: 20201221
  environment:
    AWS_ACCESS_KEY_ID: ${env:AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  artifact: target/mex-dev.jar

plugins:
  - serverless-offline

custom:
  serverless-offline:
    noPrependStageInUrl: true

functions:
  getNode:
    handler: com.serverless.nodeHandlers.GetNode
    events:
      - httpApi:
          path: /node/{id}
          method: get
  createNode:
    handler: com.serverless.nodeHandlers.CreateNode
    events:
      - httpApi:
          path: /node
          method: post
  updateNode:
    handler: com.serverless.nodeHandlers.UpdateNode
    events:
      - httpApi:
          path: /node/update
          method: post
  deleteNode:
    handler: com.serverless.nodeHandlers.DeleteNode
    events:
      - httpApi:
          path: /node/{id}
          method: delete
  appendDataToNode:
    handler: com.serverless.nodeHandlers.AppendDataToNode
    events:
      - httpApi:
          path: /node/append
          method: post

  getAllNodesWithNamespaceID:
    handler: com.serverless.nodeHandlers.GetAllNodesWithNamespaceID
    events:
      - httpApi:
          path: /node/namespace/{id}
          method: get

  getAllNodesWithWorkspaceID:
    handler: com.serverless.nodeHandlers.GetAllNodesWithWorkspaceID
    events:
      - httpApi:
          path: /node/workspace/{id}
          method: get


  getNamespace:
    handler: com.serverless.namespaceHandlers.GetNamespace
    events:
      - httpApi:
          path: /namespace/{id}
          method: get
  createNamespace:
      handler: com.serverless.namespaceHandlers.CreateNamespace
      events:
        - httpApi:
            path: /namespace
            method: post
  updateNamespace:
      handler: com.serverless.namespaceHandlers.UpdateNamespace
      events:
        - httpApi:
            path: /namespace/update
            method: post
  deleteNamespace:
      handler: com.serverless.namespaceHandlers.DeleteNamespace
      events:
        - httpApi:
            path: /namespace/{id}
            method: delete

  getWorkspace:
    handler: com.serverless.workspaceHandlers.GetWorkspace
    events:
      - httpApi:
          path: /workspace/{id}
          method: get
  createWorkspace:
    handler: com.serverless.workspaceHandlers.CreateWorkspace
    events:
      - httpApi:
          path: /workspace
          method: post
  updateWorkspace:
    handler: com.serverless.workspaceHandlers.UpdateWorkspace
    events:
      - httpApi:
          path: /workspace/update
          method: post
  deleteWorkspace:
    handler: com.serverless.workspaceHandlers.DeleteWorkspace
    events:
      - httpApi:
          path: /workspace/{id}
          method: delete


  getUser:
    handler: com.serverless.userHandlers.GetUser
    events:
      - httpApi:
          path: /user/{id}
          method: get
  createUser:
    handler: com.serverless.userHandlers.CreateUser
    events:
      - httpApi:
          path: /user
          method: post
  updateUser:
    handler: com.serverless.userHandlers.UpdateUser
    events:
      - httpApi:
          path: /user/update
          method: post
  deleteUser:
    handler: com.serverless.userHandlers.DeleteUser
    events:
      - httpApi:
          path: /user/{id}
          method: delete

  createUserIdentifierMappingRecord:
    handler: com.serverless.userIdentifierMappingHandlers.CreateUserIdentifierMappingRecord
    events:
      - httpApi:
          path: /userIdentifierMappingRecord
          method: post

  deleteUserIdentifierMappingRecord:
    handler: com.serverless.userIdentifierMappingHandlers.DeleteUserIdentifierMappingRecord
    events:
      - httpApi:
          path: /userIdentifierMappingRecord/{userID}/{identifierID}
          method: delete

  getUserRecords:
    handler: com.serverless.userIdentifierMappingHandlers.GetUserRecords
    events:
      - httpApi:
          path: /userRecords/{id}
          method: get
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

useDotenv: true

resources:
  Resources:
    elementsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: sampleData
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
